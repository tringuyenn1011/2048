{"version":3,"sources":["assets\\Scripts\\Tile.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["// Learn TypeScript:\n//  - https://docs.cocos.com/creator/2.4/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - https://docs.cocos.com/creator/2.4/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - https://docs.cocos.com/creator/2.4/manual/en/scripting/life-cycle-callbacks.html\n\nimport TileCell from \"./TileCell\";\nimport TileState from \"./TileState\";\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class Tile extends cc.Component {\n\n    cell: TileCell\n\n    number: number = 0\n    locked: boolean\n\n    // LIFE-CYCLE CALLBACKS:\n\n    start () {\n\n    }\n\n\n    SetState(number: number){\n        this.number = number\n\n        let text = this.node.getChildByName(\"Text\")\n        let data = new TileState().getTileValue(number)\n        if (data){\n            \n            if (data.bgColor){\n                this.node.color = data.bgColor\n            }\n            if (data.textColor){\n                text.color = data.textColor\n            }\n            text.getComponent(cc.Label).string = this.number.toString() \n        }\n    }\n\n    Spawn(cell:TileCell, grid:cc.Node){\n        if(this.cell != null) {\n            this.cell.SetTile(null); // Đặt tile của cell cũ thành null\n        }\n\n        this.cell = cell\n\n        this.cell.SetTile(this)\n        // Lấy vị trí của cell trong thế giới (world space)\n        let cellWorldPos = cell.node.convertToWorldSpaceAR(cc.v2(0, 0));\n\n        // Chuyển đổi vị trí toàn cục của cell sang vị trí cục bộ của grid\n        let gridLocalPos = grid.convertToNodeSpaceAR(cellWorldPos);\n\n        this.node.setPosition(gridLocalPos);\n    }\n\n    MoveTo(cell: TileCell, grid: cc.Node){\n        if(this.cell != null) {\n            this.cell.SetTile(null); // Đặt tile của cell cũ thành null\n        }\n        this.cell = cell\n        this.cell.SetTile(this)\n        // Lấy vị trí của cell trong thế giới (world space)\n        let cellWorldPos = cell.node.convertToWorldSpaceAR(cc.v3(0, 0, 0));\n        // Chuyển đổi vị trí toàn cục của cell sang vị trí cục bộ của grid\n        let gridLocalPos = grid.convertToNodeSpaceAR(cellWorldPos);\n\n        this.AnimateMove(gridLocalPos, false)\n    }\n\n    Merge(cell: TileCell, grid: cc.Node)\n    {\n        if(this.cell != null) {\n            this.cell.SetTile(null); // Đặt tile của cell cũ thành null\n        }\n        this.cell = null\n        cell.tile.locked = true;\n        // Lấy vị trí của cell trong thế giới (world space)\n        let cellWorldPos = cell.node.convertToWorldSpaceAR(cc.v3(0, 0, 0));\n        // Chuyển đổi vị trí toàn cục của cell sang vị trí cục bộ của grid\n        let gridLocalPos = grid.convertToNodeSpaceAR(cellWorldPos);\n        \n        this.AnimateMove(gridLocalPos, true)\n\n    }\n\n    async AnimateMove(to: cc.Vec3, merging: boolean)\n    {\n        let elapsed = 0\n        const duration = 0.3\n\n        const from = this.node.position.clone()\n\n        while(elapsed < duration)\n        {\n            const t = elapsed/duration\n            this.node.position = from.lerp(to, t)\n            elapsed += 1/60\n            await this.sleep(0)\n        }\n\n        this.node.position = to\n\n        if(merging)\n        {\n            this.node.destroy()\n        }\n    }\n\n    async AnimateMerge(to: number, duration: number) {\n        this.node.scale = 1\n        const from = this.node.scale; \n        // Phần phóng to \n        this.AnimateScale(from, to, duration)\n        // Phần thu nhỏ\n        this.AnimateScale(to, from, duration)\n    }\n\n\n    \n    async AnimateCreate(to: number, duration: number) {\n        this.node.scale = 0.6\n        const from = this.node.scale;  \n\n        this.AnimateScale(from, to, duration)\n\n    }\n\n    //AnimateBasic\n    async AnimateScale(from: number, to:number, duration:number)\n    {\n        let elapsed = 0;\n        const halfDuration = duration / 2; \n        while (elapsed < halfDuration) {\n            const t = elapsed / halfDuration;\n            this.node.scale = cc.misc.lerp(from, to, t);  \n    \n            elapsed += 1 /60;\n            await this.sleep(1000/60); \n        }\n        this.node.scale = to\n    }\n\n    sleep(ms: number)\n    {\n        return new Promise(resolve => setTimeout(resolve, ms))\n    }\n\n}\n"]}