{"version":3,"sources":["assets\\Scripts\\TileGrid_v0.js"],"names":["cc","Class","Component","properties","onLoad","size","height","width","rows","getComponentsInChildren","cells","start","y","length","x","coordinates","v2","GetCell","GetCellTemp","GetAdjacentCell","cell","direction","_extends","GetRandomEmptyCell","index","parseInt","Math","random","startingIndex","occupied"],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEAA,EAAE,CAACC,KAAK,CAAC;EACL,WAASD,EAAE,CAACE,SAAS;EAErBC,UAAU,EAAE,CAIZ,CAAC;EAED;EAEAC,MAAM,WAAAA,OAAA,EAAI;IACN,IAAI,CAACC,IAAI,GAAG,EAAE;IACd,IAAI,CAACC,MAAM,GAAG,CAAC;IACf,IAAI,CAACC,KAAK,GAAG,CAAC;IAGd,IAAI,CAACC,IAAI,GAAG,IAAI,CAACC,uBAAuB,CAAC,SAAS,CAAC;IACnD,IAAI,CAACC,KAAK,GAAG,IAAI,CAACD,uBAAuB,CAAC,UAAU,CAAC;EAEzD,CAAC;EAEDE,KAAK,WAAAA,MAAA,EAAI;IAEL,KAAI,IAAIC,CAAC,GAAC,CAAC,EAAEA,CAAC,GAAC,IAAI,CAACJ,IAAI,CAACK,MAAM,EAAED,CAAC,EAAE,EACpC;MACI,KAAI,IAAIE,CAAC,GAAC,CAAC,EAAEA,CAAC,GAAC,IAAI,CAACN,IAAI,CAACI,CAAC,CAAC,CAACF,KAAK,CAACG,MAAM,EAAEC,CAAC,EAAE,EAC7C;QACI,IAAI,CAACN,IAAI,CAACI,CAAC,CAAC,CAACF,KAAK,CAACI,CAAC,CAAC,CAACC,WAAW,GAAGf,EAAE,CAACgB,EAAE,CAACF,CAAC,EAAEF,CAAC,CAAC;MAEnD;IACJ;EAEJ,CAAC;EAEDK,OAAO,WAAAA,QAACH,CAAC,EAAEF,CAAC,EAAC;IAET,IAAGE,CAAC,IAAI,CAAC,IAAIA,CAAC,GAAG,IAAI,CAACP,KAAK,IAAIK,CAAC,IAAI,CAAC,IAAIA,CAAC,GAAG,IAAI,CAACN,MAAM,EACxD;MACI,OAAO,IAAI,CAACE,IAAI,CAACI,CAAC,CAAC,CAACF,KAAK,CAACI,CAAC,CAAC;IAChC,CAAC,MAED;MACI,OAAO,IAAI;IACf;EAEJ,CAAC;EAEDI,WAAW,WAAAA,YAACH,WAAW,EAAE;IACrB,OAAO,IAAI,CAACE,OAAO,CAACF,WAAW,CAACD,CAAC,EAAEC,WAAW,CAACH,CAAC,CAAC;EACrD,CAAC;EAEDO,eAAe,WAAAA,gBAACC,IAAI,EAAEC,SAAS,EAAC;IAC5B,IAAIN,WAAW,GAAAO,QAAA,KAAQF,IAAI,CAACL,WAAW,CAAE;IACzCA,WAAW,CAACD,CAAC,IAAIO,SAAS,CAACP,CAAC;IAC5BC,WAAW,CAACH,CAAC,IAAIS,SAAS,CAACT,CAAC;IAE5B,OAAO,IAAI,CAACM,WAAW,CAACH,WAAW,CAAC;EACxC,CAAC;EAEDQ,kBAAkB,WAAAA,mBAAA,EAAG;IACjB,IAAIC,KAAK,GAAGC,QAAQ,CAACC,IAAI,CAACC,MAAM,EAAE,GAAC,IAAI,CAACjB,KAAK,CAACG,MAAM,CAAC;IACrD,IAAIe,aAAa,GAAGJ,KAAK;IAEzB,OAAM,IAAI,CAACd,KAAK,CAACc,KAAK,CAAC,CAACK,QAAQ,EAChC;MAEIL,KAAK,EAAE;MACP,IAAGA,KAAK,IAAI,IAAI,CAACd,KAAK,CAACG,MAAM,EAC7B;QAEIW,KAAK,GAAG,CAAC;MACb;MAGA,IAAGA,KAAK,IAAII,aAAa,EACzB;QAEI,OAAO,IAAI;MACf;IAEJ;IAEA,OAAO,IAAI,CAAClB,KAAK,CAACc,KAAK,CAAC;EAC5B,CAAC,CAED;AACJ,CAAC,CAAC","sourceRoot":"/","sourcesContent":["// Learn cc.Class:\n//  - https://docs.cocos.com/creator/2.4/manual/en/scripting/class.html\n// Learn Attribute:\n//  - https://docs.cocos.com/creator/2.4/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - https://docs.cocos.com/creator/2.4/manual/en/scripting/life-cycle-callbacks.html\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        \n\n        \n    },\n\n    // LIFE-CYCLE CALLBACKS:\n\n    onLoad () {\n        this.size = 16\n        this.height = 4\n        this.width = 4\n\n\n        this.rows = this.getComponentsInChildren(\"TileRow\")\n        this.cells = this.getComponentsInChildren(\"TileCell\")\n\n    },\n\n    start () {\n        \n        for(let y=0; y<this.rows.length; y++)\n        {\n            for(let x=0; x<this.rows[y].cells.length; x++)\n            {\n                this.rows[y].cells[x].coordinates = cc.v2(x, y)\n                \n            }\n        }\n\n    },\n\n    GetCell(x, y){\n        \n        if(x >= 0 && x < this.width && y >= 0 && y < this.height)\n        {\n            return this.rows[y].cells[x]\n        }\n        else\n        {   \n            return null\n        }\n            \n    },\n\n    GetCellTemp(coordinates) {\n        return this.GetCell(coordinates.x, coordinates.y)\n    },\n\n    GetAdjacentCell(cell, direction){\n        let coordinates = { ...cell.coordinates }   \n        coordinates.x += direction.x\n        coordinates.y -= direction.y\n        \n        return this.GetCellTemp(coordinates)\n    },\n\n    GetRandomEmptyCell() {\n        let index = parseInt(Math.random()*this.cells.length)\n        let startingIndex = index\n\n        while(this.cells[index].occupied)\n        {\n            \n            index++\n            if(index >= this.cells.length)\n            {\n                \n                index = 0\n            }\n                \n\n            if(index == startingIndex)  \n            {\n                \n                return null\n            }\n                \n        }\n\n        return this.cells[index]\n    }\n\n    // update (dt) {},\n});\n"]}