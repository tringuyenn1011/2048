{"version":3,"sources":["assets\\Scripts\\TileGrid.ts"],"names":[],"mappings":";;;;;AAAA,oBAAoB;AACpB,4EAA4E;AAC5E,mBAAmB;AACnB,sFAAsF;AACtF,8BAA8B;AAC9B,sFAAsF;;;;;;;;;;;;;;;;;;;;;AAMhF,IAAA,KAAsB,EAAE,CAAC,UAAU,EAAlC,OAAO,aAAA,EAAE,QAAQ,cAAiB,CAAC;AAG1C;IAAsC,4BAAY;IAAlD;;IA0EA,CAAC;IAjEG,wBAAwB;IAExB,yBAAM,GAAN;QAEI,IAAI,CAAC,IAAI,GAAG,EAAE,CAAA;QACd,IAAI,CAAC,MAAM,GAAG,CAAC,CAAA;QACf,IAAI,CAAC,KAAK,GAAG,CAAC,CAAA;QAGd,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,uBAAuB,CAAC,SAAS,CAAC,CAAA;QACnD,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,uBAAuB,CAAC,UAAU,CAAC,CAAA;IACzD,CAAC;IAED,wBAAK,GAAL;QAEI,KAAI,IAAI,CAAC,GAAC,CAAC,EAAE,CAAC,GAAC,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE;YAChC,KAAI,IAAI,CAAC,GAAC,CAAC,EAAE,CAAC,GAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE;gBACzC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,WAAW,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;IAG3D,CAAC;IAED,0BAAO,GAAP,UAAQ,CAAS,EAAE,CAAQ;QAEvB,IAAG,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,KAAK,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,MAAM;YACpD,OAAO,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAA;;YAG5B,OAAO,IAAI,CAAA;IACnB,CAAC;IAED,8BAAW,GAAX,UAAY,WAAoB;QAE5B,OAAO,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,CAAC,CAAA;IACrD,CAAC;IAED,kCAAe,GAAf,UAAgB,IAAc,EAAE,SAAkB;QAE9C,IAAI,WAAW,GAAG,IAAI,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;QACtE,WAAW,CAAC,CAAC,IAAI,SAAS,CAAC,CAAC,CAAA;QAC5B,WAAW,CAAC,CAAC,IAAI,SAAS,CAAC,CAAC,CAAA;QAE5B,OAAO,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,CAAA;IACxC,CAAC;IAED,qCAAkB,GAAlB;QAEI,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAA;QACvD,IAAI,aAAa,GAAG,KAAK,CAAA;QAEzB,OAAM,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,QAAQ,EAChC;YAEI,KAAK,EAAE,CAAA;YACP,IAAG,KAAK,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM;gBACzB,KAAK,GAAG,CAAC,CAAA;YAEb,IAAG,KAAK,IAAI,aAAa;gBACrB,OAAO,IAAI,CAAA;SAElB;QAED,OAAO,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAA;IAC5B,CAAC;IAxEgB,QAAQ;QAD5B,OAAO;OACa,QAAQ,CA0E5B;IAAD,eAAC;CA1ED,AA0EC,CA1EqC,EAAE,CAAC,SAAS,GA0EjD;kBA1EoB,QAAQ","file":"","sourceRoot":"/","sourcesContent":["// Learn TypeScript:\n//  - https://docs.cocos.com/creator/2.4/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - https://docs.cocos.com/creator/2.4/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - https://docs.cocos.com/creator/2.4/manual/en/scripting/life-cycle-callbacks.html\n\nimport Tile from \"./Tile\";\nimport TileCell from \"./TileCell\";\nimport TileRow from \"./TileRow\";\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class TileGrid extends cc.Component {\n\n    size: number\n    height: number\n    width: number\n\n    rows: Array<TileRow>\n    cells: Array<TileCell>\n\n    // LIFE-CYCLE CALLBACKS:\n\n    onLoad () \n    {\n        this.size = 16\n        this.height = 4\n        this.width = 4\n\n\n        this.rows = this.getComponentsInChildren(\"TileRow\")\n        this.cells = this.getComponentsInChildren(\"TileCell\")\n    }\n\n    start () \n    {\n        for(let y=0; y<this.rows.length; y++)\n            for(let x=0; x<this.rows[y].cells.length; x++)                \n                this.rows[y].cells[x].coordinates = cc.v2(x, y)    \n                \n            \n    }\n\n    GetCell(x: number, y:number)\n    {\n        if(x >= 0 && x < this.width && y >= 0 && y < this.height)\n            return this.rows[y].cells[x]\n        \n        else        \n            return null\n    }\n\n    GetCellTemp(coordinates: cc.Vec2) \n    {\n        return this.GetCell(coordinates.x, coordinates.y)\n    }\n\n    GetAdjacentCell(cell: TileCell, direction: cc.Vec2)\n    {\n        let coordinates = new cc.Vec2(cell.coordinates.x, cell.coordinates.y); \n        coordinates.x += direction.x\n        coordinates.y -= direction.y\n        \n        return this.GetCellTemp(coordinates)\n    }\n\n    GetRandomEmptyCell() \n    {\n        let index = Math.floor(Math.random()*this.cells.length)\n        let startingIndex = index\n\n        while(this.cells[index].occupied)\n        {\n            \n            index++\n            if(index >= this.cells.length)                \n                index = 0\n\n            if(index == startingIndex)                \n                return null\n    \n        }\n\n        return this.cells[index]\n    }\n    // update (dt) {}\n}\n"]}