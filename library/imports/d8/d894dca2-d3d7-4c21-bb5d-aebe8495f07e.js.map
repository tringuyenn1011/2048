{"version":3,"sources":["assets\\Scripts\\TileBoard_v0.js"],"names":["_regeneratorRuntime","exports","Op","Object","prototype","hasOwn","hasOwnProperty","defineProperty","obj","key","desc","value","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","enumerable","configurable","writable","err","wrap","innerFn","outerFn","self","tryLocsList","protoGenerator","Generator","generator","create","context","Context","makeInvokeMethod","tryCatch","fn","arg","type","call","ContinueSentinel","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","method","_invoke","AsyncIterator","PromiseImpl","invoke","resolve","reject","record","result","__await","then","unwrapped","error","previousPromise","callInvokeWithMethodAndArg","state","Error","doneResult","delegate","delegateResult","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","done","methodName","undefined","TypeError","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","length","i","displayName","isGeneratorFunction","genFun","ctor","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","iter","keys","val","object","reverse","pop","skipTempReset","prev","charAt","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","_catch","thrown","delegateYield","asyncGeneratorStep","gen","_next","_throw","_asyncToGenerator","args","arguments","apply","cc","Class","Component","properties","tile_prefab","Prefab","game_control","Node","onLoad","grid","node","getChildByName","getComponent","tiles","Array","waiting","systemEvent","on","SystemEvent","EventType","KEY_DOWN","onKeyDown","ClearBoard","cells","SetTile","destroy","splice","CreateTile","tile","instantiate","addChild","SetState","Spawn","GetRandomEmptyCell","event","keyCode","macro","KEY","up","w","MoveTiles","v2","down","s","height","left","a","right","d","width","direction","startX","incrementX","startY","incrementY","changed","x","y","cell","GetCell","MoveTile","WaitForChanges","newCell","adjacent","GetAdjacentCell","occupied","checkCanMerge","Merge","empty","MoveTo","b","number","indexToDelete","indexOf","IncreaseScore","AnimateScale","WaitForSecond","size","CheckForGameOver","console","log","GameOver","ms","_this","_callee","_callee$","_context","sleep","setTimeout","update","dt"],"mappings":"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","sourceRoot":"/","sourcesContent":["cc.Class({\n    extends: cc.Component,\n\n    properties: {\n\n        tile_prefab: cc.Prefab,\n\n        game_control: cc.Node,\n\n    },\n\n    // LIFE-CYCLE CALLBACKS:\n\n    onLoad () {\n        this.grid = this.node.getChildByName(\"Grid\").getComponent(\"TileGrid\")\n        this.tiles = new Array(16)\n        this.waiting = false\n        cc.systemEvent.on(cc.SystemEvent.EventType.KEY_DOWN, this.onKeyDown, this);\n    },\n\n    ClearBoard()\n    {\n        for(let i = 0; i < this.grid.cells.length; i++)\n        {\n            if(this.grid.cells[i] != null)\n                this.grid.cells[i].SetTile(null);\n        }\n\n        for(let i = 0; i < this.tiles.length; i++)\n        {\n            if(this.tiles[i] != null)\n                this.tiles[i].node.destroy()\n        }\n\n        this.tiles.splice(0, this.tiles.length);\n    },\n\n    CreateTile() {\n        let tile = cc.instantiate(this.tile_prefab).getComponent(\"Tile\")\n        this.grid.node.addChild(tile.node)\n\n        tile.SetState(2)\n\n\n        tile.Spawn(this.grid.GetRandomEmptyCell(), this.grid.node)\n\n        this.tiles.push(tile)\n    },\n\n    onKeyDown (event) {\n        if(!this.waiting)\n        {\n            switch(event.keyCode) {\n            case cc.macro.KEY.up:\n            case cc.macro.KEY.w:\n                this.MoveTiles(cc.v2(0,+1), 0, 1, 1, 1)\n                break\n            case cc.macro.KEY.down:\n            case cc.macro.KEY.s:\n                this.MoveTiles(cc.v2(0,-1), 0, 1, this.grid.height - 2, -1)\n                break\n            case cc.macro.KEY.left:\n            case cc.macro.KEY.a:\n                this.MoveTiles(cc.v2(-1,0), 1, 1, 0, 1)\n                break\n            case cc.macro.KEY.right:\n            case cc.macro.KEY.d:   \n                this.MoveTiles(cc.v2(1,0), this.grid.width - 2, -1, 0, 1)\n                break\n            }\n        }\n        \n    },\n\n    MoveTiles(direction, startX, incrementX, startY, incrementY){\n        let changed = false\n        for (let x = startX; x >= 0 && x < this.grid.width; x += incrementX)\n        {\n            for (let y = startY; y >= 0 && y < this.grid.height; y += incrementY)\n            {\n\n                cell = this.grid.GetCell(x, y)\n                \n                if(cell.tile != null)\n                {\n                    changed |= this.MoveTile(cell.tile, direction)\n                }\n                    \n            }\n        }\n\n        if(changed)\n        {\n            this.WaitForChanges()\n        }\n    },\n    \n    MoveTile(tile, direction)\n    {\n        var newCell = null\n        var adjacent = this.grid.GetAdjacentCell(tile.cell, direction)\n        \n        while(adjacent != null)\n        {   \n            \n            if(adjacent.occupied)\n            {\n                if(this.checkCanMerge(tile, adjacent.tile))\n                {\n                    //merge\n                    this.Merge(tile, adjacent.tile)\n                    return true\n                }\n                break;\n            }\n            \n            \n            newCell = adjacent\n            adjacent = this.grid.GetAdjacentCell(adjacent, direction)\n            \n            \n        }\n        \n        if(newCell != null && newCell.empty)\n        {\n            tile.MoveTo(newCell, this.grid.node)\n            return true;\n        }\n\n        return false\n            \n    },\n\n    checkCanMerge(a, b)\n    {\n        return a.number == b.number\n    },\n\n    Merge(a, b)\n    {\n        //this.tiles.splice(a)\n\n        let indexToDelete = this.tiles.indexOf(a);\n        if (indexToDelete !== -1)\n            this.tiles.splice(indexToDelete, 1);\n    \n\n        a.Merge(b.cell, this.grid.node)\n\n        let number = b.number * 2;\n        b.SetState(number)\n\n        this.game_control.getComponent(\"game_control\").IncreaseScore(number)\n\n        b.AnimateScale(1.2, 0.3)\n\n        this.WaitForSecond(200)\n    },\n\n    \n\n\n    WaitForChanges()\n    {\n        this.WaitForSecond(200)\n            \n        if(this.tiles.length != this.grid.size)\n            this.CreateTile()\n\n        if(this.CheckForGameOver())\n        {\n            console.log(\"gameOver\")\n            this.game_control.getComponent(\"game_control\").GameOver()\n        }\n        \n    },\n\n    async WaitForSecond(ms)\n    {\n        this.waiting = true\n\n        await this.sleep(ms)\n\n        this.waiting = false\n    },\n\n    sleep(ms)\n    {\n        return new Promise(resolve => setTimeout(resolve, ms))\n    },\n\n    CheckForGameOver()\n    {\n        //Sửa lại length\n        if(this.tiles.length != this.grid.size)\n        {\n            \n            return false\n        }\n            \n\n        for(let i = 0; i < this.tiles.length; i++)\n        {\n            if(this.tiles[i].cell != null)\n            {\n                let up = this.grid.GetAdjacentCell(this.tiles[i].cell, cc.v2(0,1))\n                let down = this.grid.GetAdjacentCell(this.tiles[i].cell, cc.v2(0,-1))\n                let left = this.grid.GetAdjacentCell(this.tiles[i].cell, cc.v2(-1,0))\n                let right = this.grid.GetAdjacentCell(this.tiles[i].cell, cc.v2(1,0))\n\n                if(up != null && this.checkCanMerge(this.tiles[i], up.tile))\n                    return false\n\n                if(down != null && this.checkCanMerge(this.tiles[i], down.tile))\n                    return false\n\n                if(left != null && this.checkCanMerge(this.tiles[i], left.tile))\n                    return false\n\n                if(right != null && this.checkCanMerge(this.tiles[i], right.tile))\n                    return false\n            }\n\n        }\n        return true\n    },\n\n    update (dt) {\n\n    },\n});\n"]}